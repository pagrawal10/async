/*
Copyright Â© 2022 NAME HERE <EMAIL ADDRESS>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package cmd

import (
	"encoding/json"
	"fmt"
	"github.com/spf13/cobra"
	"github.com/swaggest/go-asyncapi/reflector/asyncapi-2.0.0"
	"github.com/swaggest/go-asyncapi/spec-2.0.0"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
)

// createCmd represents the create command
var createCmd = &cobra.Command{
	Use:   "create",
	Short: "Creates an Async API Spec",
	Long: `A longer description that spans multiple lines and likely contains examples
and usage of using your command.`,

	Run: func(cmd *cobra.Command, args []string) {
		// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
		reflector := asyncapi.Reflector{
			Schema: &spec.AsyncAPI{
				Servers: map[string]spec.Server{
					"production": {
						URL:             "https://pkc-0wg55.us-central1.gcp.devel.cpdev.cloud:443",
						Description:     "Kafka Production instance.",
						ProtocolVersion: "7.2.0",
						Protocol:        "Kafka",
					},
				},
				Info: spec.Info{
					Version: "2.0.0", // required
					Title:   "API Document for Confluent Cluster",
				},
			},
		}
		mustNotFail := func(err error) {
			if err != nil {
				panic(err.Error())
			}
		}
		// curl -s -u PAU2KX7Z6LIROIQK:8Qm4emI/yvsg0G/lYxrtNuQmSVUOsrSQ/MYVE8bvy83DgC6AR3le3q5pbMs89PyP GET https://psrc-8jz90.us-west-2.aws.devel.cpdev.cloud/schemas
		url := "https://psrc-8jz90.us-west-2.aws.devel.cpdev.cloud/subjects"
		req, _ := http.NewRequest("GET", url, nil)
		req.SetBasicAuth("PAU2KX7Z6LIROIQK", "8Qm4emI/yvsg0G/lYxrtNuQmSVUOsrSQ/MYVE8bvy83DgC6AR3le3q5pbMs89PyP")
		resp, _ := http.DefaultClient.Do(req)
		defer func(Body io.ReadCloser) {
			err := Body.Close()
			if err != nil {
				fmt.Println("Error in getting subjects")
			}
		}(resp.Body)

		body, _ := ioutil.ReadAll(resp.Body)
		topics := string(body)
		topics = topics[1 : len(topics)-1]
		topic := strings.Split(topics, ",")
		fmt.Println(topic)
		type Field struct {
			Name string `json:"name" description:"foo"`
			Type string `json:"type"`
			Doc  string `json:"doc"`
		}
		type OuterStruct struct {
			Name      string  `json:"name"`
			Type      string  `json:"type"`
			Doc       string  `json:"doc"`
			Namespace string  `json:"namespace"`
			Fields    []Field `json:"fields"`
		}

		for i := 0; i < len(topic); i++ {
			//For a given topic
			if strings.Contains(topic[i], "key") {
				continue
			}

			url = "https://psrc-8jz90.us-west-2.aws.devel.cpdev.cloud/subjects/" + topic[i][1:len(topic[i])-1] + "/versions/latest"
			fmt.Println(url)
			req, _ = http.NewRequest("GET", url, nil)
			req.SetBasicAuth("PAU2KX7Z6LIROIQK", "8Qm4emI/yvsg0G/lYxrtNuQmSVUOsrSQ/MYVE8bvy83DgC6AR3le3q5pbMs89PyP")
			resp, _ = http.DefaultClient.Do(req)
			defer func(Body io.ReadCloser) {
				err := Body.Close()
				if err != nil {
					fmt.Println("Error in getting version")
				}
			}(resp.Body)
			var contentType string
			schemaInfo, _ := ioutil.ReadAll(resp.Body)
			if !strings.Contains(string(schemaInfo), "schemaType") {
				contentType = "avro"
			} else if strings.Contains(string(schemaInfo), "\"schemaType\":\"JSON\"") {
				contentType = "application/json"
			} else {
				contentType = "Protobuf"
			}

			url = "https://psrc-8jz90.us-west-2.aws.devel.cpdev.cloud/subjects/" + topic[i][1:len(topic[i])-1] + "/versions/latest/schema"
			fmt.Println(url)
			req, _ = http.NewRequest("GET", url, nil)
			req.SetBasicAuth("PAU2KX7Z6LIROIQK", "8Qm4emI/yvsg0G/lYxrtNuQmSVUOsrSQ/MYVE8bvy83DgC6AR3le3q5pbMs89PyP")
			resp, _ = http.DefaultClient.Do(req)
			defer func(Body io.ReadCloser) {
				err := Body.Close()
				if err != nil {
					fmt.Println("Error in getting schema version")
				}
			}(resp.Body)
			schema, _ := ioutil.ReadAll(resp.Body)
			fmt.Println(string(schema))
			var x interface{}
			err := json.Unmarshal([]byte(schema), &x)
			if err != nil {
				fmt.Println("Error in unmarshal")
				return
			}

			/*
				var sch OuterStruct

				err = json.Unmarshal([]byte(schema), &sch)
				if err != nil {
					fmt.Println("Error in parsing schema")
					return
				}

				fmt.Println(sch.Name)
				err = ioutil.WriteFile("schema"+strconv.Itoa(ver)+".avsc", []byte(strings.Replace(abc, sch.Name, "Msg" strconv.Itoa(ver), 1)), 0644)
				if err != nil {
					fmt.Println("error in writing file")
					return
				}
				cmd := exec.Command("go", "run", "github.com/actgardner/gogen-avro/v10/cmd/gogen-avro", "avro", "schema"+strconv.Itoa(ver)+".avsc")
				err = cmd.Run()
				if err != nil {
					log.Fatal(err)
				}
				cmd = exec.Command("sleep", "0")
				err = cmd.Run()
				if err != nil {
					log.Fatal(err)
				}*/
			entity := (*spec.MessageEntity).WithContentType(new(spec.MessageEntity), contentType)
			mustNotFail(reflector.AddChannel(asyncapi.ChannelInfo{
				Name: topic[i][1 : len(topic[i])-1],
				Publish: &asyncapi.MessageSample{
					MessageEntity: *(*spec.MessageEntity).WithPayloadItem(entity, "schema", x),
					MessageSample: nil,
				},
			}))

			/*
			   out, err := exec.Command("go", "run", "main.go", "gotoasync").CombinedOutput()
			   if err != nil {
			       log.Fatal(err)
			   }
			   fmt.Println(string(out))
			   }
			*/

		}
		yaml, err := reflector.Schema.MarshalYAML()
		mustNotFail(err)
		fmt.Println(string(yaml))
		mustNotFail(ioutil.WriteFile("async.yaml", yaml, 0644))

	},
}

func init() {
	rootCmd.AddCommand(createCmd)
	createCmd.PersistentFlags().String("file", "", "output file name")
}
