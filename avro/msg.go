// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

// Sample schema to help you get started.
type Msg struct {
	// The id of the order.
	OrderId int32 `json:"orderId"`
}

const MsgAvroCRC64Fingerprint = "\xf8\x1dpp/\xb1\xcb\x11"

func NewMsg() Msg {
	r := Msg{}
	return r
}

func DeserializeMsg(r io.Reader) (Msg, error) {
	t := NewMsg()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMsgFromSchema(r io.Reader, schema string) (Msg, error) {
	t := NewMsg()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMsg(r Msg, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.OrderId, w)
	if err != nil {
		return err
	}
	return err
}

func (r Msg) Serialize(w io.Writer) error {
	return writeMsg(r, w)
}

func (r Msg) Schema() string {
	return "{\"doc\":\"Sample schema to help you get started.\",\"fields\":[{\"doc\":\"The id of the order.\",\"name\":\"orderId\",\"type\":\"int\"}],\"name\":\"com.mycorp.mynamespace.Msg\",\"type\":\"record\"}"
}

func (r Msg) SchemaName() string {
	return "com.mycorp.mynamespace.Msg"
}

func (_ Msg) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Msg) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Msg) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Msg) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Msg) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Msg) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Msg) SetString(v string)   { panic("Unsupported operation") }
func (_ Msg) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Msg) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.OrderId}

		return w

	}
	panic("Unknown field index")
}

func (r *Msg) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Msg) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Msg) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Msg) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Msg) HintSize(int)                     { panic("Unsupported operation") }
func (_ Msg) Finalize()                        {}

func (_ Msg) AvroCRC64Fingerprint() []byte {
	return []byte(MsgAvroCRC64Fingerprint)
}

func (r Msg) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["orderId"], err = json.Marshal(r.OrderId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Msg) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["orderId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrderId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for orderId")
	}
	return nil
}
