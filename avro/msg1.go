// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

// Sample schema to help you get started.
type Msg1 struct {
	// The id of the order.
	OrderId int32 `json:"orderId"`
	// Timestamp of the order.
	OrderTime int32 `json:"orderTime"`
	// The address of the order.
	OrderAddress string `json:"orderAddress"`
}

const Msg1AvroCRC64Fingerprint = "\xbbv÷¢\x9d\x92c("

func NewMsg1() Msg1 {
	r := Msg1{}
	return r
}

func DeserializeMsg1(r io.Reader) (Msg1, error) {
	t := NewMsg1()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMsg1FromSchema(r io.Reader, schema string) (Msg1, error) {
	t := NewMsg1()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMsg1(r Msg1, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.OrderId, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.OrderTime, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrderAddress, w)
	if err != nil {
		return err
	}
	return err
}

func (r Msg1) Serialize(w io.Writer) error {
	return writeMsg1(r, w)
}

func (r Msg1) Schema() string {
	return "{\"doc\":\"Sample schema to help you get started.\",\"fields\":[{\"doc\":\"The id of the order.\",\"name\":\"orderId\",\"type\":\"int\"},{\"doc\":\"Timestamp of the order.\",\"name\":\"orderTime\",\"type\":\"int\"},{\"doc\":\"The address of the order.\",\"name\":\"orderAddress\",\"type\":\"string\"}],\"name\":\"com.mycorp.mynamespace.Msg1\",\"type\":\"record\"}"
}

func (r Msg1) SchemaName() string {
	return "com.mycorp.mynamespace.Msg1"
}

func (_ Msg1) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Msg1) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Msg1) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Msg1) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Msg1) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Msg1) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Msg1) SetString(v string)   { panic("Unsupported operation") }
func (_ Msg1) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Msg1) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.OrderId}

		return w

	case 1:
		w := types.Int{Target: &r.OrderTime}

		return w

	case 2:
		w := types.String{Target: &r.OrderAddress}

		return w

	}
	panic("Unknown field index")
}

func (r *Msg1) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Msg1) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Msg1) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Msg1) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Msg1) HintSize(int)                     { panic("Unsupported operation") }
func (_ Msg1) Finalize()                        {}

func (_ Msg1) AvroCRC64Fingerprint() []byte {
	return []byte(Msg1AvroCRC64Fingerprint)
}

func (r Msg1) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["orderId"], err = json.Marshal(r.OrderId)
	if err != nil {
		return nil, err
	}
	output["orderTime"], err = json.Marshal(r.OrderTime)
	if err != nil {
		return nil, err
	}
	output["orderAddress"], err = json.Marshal(r.OrderAddress)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Msg1) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["orderId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrderId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for orderId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["orderTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrderTime); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for orderTime")
	}
	val = func() json.RawMessage {
		if v, ok := fields["orderAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrderAddress); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for orderAddress")
	}
	return nil
}
